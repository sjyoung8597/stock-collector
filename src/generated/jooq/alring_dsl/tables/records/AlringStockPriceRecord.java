/*
 * This file is generated by jOOQ.
 */
package jooq.alring_dsl.tables.records;


import java.time.LocalDateTime;

import jooq.alring_dsl.tables.AlringStockPrice;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlringStockPriceRecord extends UpdatableRecordImpl<AlringStockPriceRecord> implements Record7<Integer, String, String, Double, Long, Long, LocalDateTime> {

    private static final long serialVersionUID = 1375234055;

    /**
     * Setter for <code>stock.stock_price.stock_no</code>. 주식 번호
     */
    public AlringStockPriceRecord setStockNo(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>stock.stock_price.stock_no</code>. 주식 번호
     */
    public Integer getStockNo() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>stock.stock_price.market_code</code>. 마켓코드
     */
    public AlringStockPriceRecord setMarketCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>stock.stock_price.market_code</code>. 마켓코드
     */
    public String getMarketCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>stock.stock_price.currency_code</code>. 통화
     */
    public AlringStockPriceRecord setCurrencyCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>stock.stock_price.currency_code</code>. 통화
     */
    public String getCurrencyCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>stock.stock_price.price</code>. 가격
     */
    public AlringStockPriceRecord setPrice(Double value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>stock.stock_price.price</code>. 가격
     */
    public Double getPrice() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>stock.stock_price.stock_listed</code>. 상당 주식 수
     */
    public AlringStockPriceRecord setStockListed(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>stock.stock_price.stock_listed</code>. 상당 주식 수
     */
    public Long getStockListed() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>stock.stock_price.market_cap</code>. 시총
     */
    public AlringStockPriceRecord setMarketCap(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>stock.stock_price.market_cap</code>. 시총
     */
    public Long getMarketCap() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>stock.stock_price.update_date</code>.
     */
    public AlringStockPriceRecord setUpdateDate(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>stock.stock_price.update_date</code>.
     */
    public LocalDateTime getUpdateDate() {
        return (LocalDateTime) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, LocalDateTime> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Double, Long, Long, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Integer, String, String, Double, Long, Long, LocalDateTime> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return AlringStockPrice.STOCK_PRICE.STOCK_NO;
    }

    @Override
    public Field<String> field2() {
        return AlringStockPrice.STOCK_PRICE.MARKET_CODE;
    }

    @Override
    public Field<String> field3() {
        return AlringStockPrice.STOCK_PRICE.CURRENCY_CODE;
    }

    @Override
    public Field<Double> field4() {
        return AlringStockPrice.STOCK_PRICE.PRICE;
    }

    @Override
    public Field<Long> field5() {
        return AlringStockPrice.STOCK_PRICE.STOCK_LISTED;
    }

    @Override
    public Field<Long> field6() {
        return AlringStockPrice.STOCK_PRICE.MARKET_CAP;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return AlringStockPrice.STOCK_PRICE.UPDATE_DATE;
    }

    @Override
    public Integer component1() {
        return getStockNo();
    }

    @Override
    public String component2() {
        return getMarketCode();
    }

    @Override
    public String component3() {
        return getCurrencyCode();
    }

    @Override
    public Double component4() {
        return getPrice();
    }

    @Override
    public Long component5() {
        return getStockListed();
    }

    @Override
    public Long component6() {
        return getMarketCap();
    }

    @Override
    public LocalDateTime component7() {
        return getUpdateDate();
    }

    @Override
    public Integer value1() {
        return getStockNo();
    }

    @Override
    public String value2() {
        return getMarketCode();
    }

    @Override
    public String value3() {
        return getCurrencyCode();
    }

    @Override
    public Double value4() {
        return getPrice();
    }

    @Override
    public Long value5() {
        return getStockListed();
    }

    @Override
    public Long value6() {
        return getMarketCap();
    }

    @Override
    public LocalDateTime value7() {
        return getUpdateDate();
    }

    @Override
    public AlringStockPriceRecord value1(Integer value) {
        setStockNo(value);
        return this;
    }

    @Override
    public AlringStockPriceRecord value2(String value) {
        setMarketCode(value);
        return this;
    }

    @Override
    public AlringStockPriceRecord value3(String value) {
        setCurrencyCode(value);
        return this;
    }

    @Override
    public AlringStockPriceRecord value4(Double value) {
        setPrice(value);
        return this;
    }

    @Override
    public AlringStockPriceRecord value5(Long value) {
        setStockListed(value);
        return this;
    }

    @Override
    public AlringStockPriceRecord value6(Long value) {
        setMarketCap(value);
        return this;
    }

    @Override
    public AlringStockPriceRecord value7(LocalDateTime value) {
        setUpdateDate(value);
        return this;
    }

    @Override
    public AlringStockPriceRecord values(Integer value1, String value2, String value3, Double value4, Long value5, Long value6, LocalDateTime value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AlringStockPriceRecord
     */
    public AlringStockPriceRecord() {
        super(AlringStockPrice.STOCK_PRICE);
    }

    /**
     * Create a detached, initialised AlringStockPriceRecord
     */
    public AlringStockPriceRecord(Integer stockNo, String marketCode, String currencyCode, Double price, Long stockListed, Long marketCap, LocalDateTime updateDate) {
        super(AlringStockPrice.STOCK_PRICE);

        set(0, stockNo);
        set(1, marketCode);
        set(2, currencyCode);
        set(3, price);
        set(4, stockListed);
        set(5, marketCap);
        set(6, updateDate);
    }
}
