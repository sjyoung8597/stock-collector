/*
 * This file is generated by jOOQ.
 */
package jooq.alring_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.alring_dsl.AlringStock;
import jooq.alring_dsl.Keys;
import jooq.alring_dsl.tables.records.AlringStockPriceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlringStockPrice extends TableImpl<AlringStockPriceRecord> {

    private static final long serialVersionUID = -1369836343;

    /**
     * The reference instance of <code>stock.stock_price</code>
     */
    public static final AlringStockPrice STOCK_PRICE = new AlringStockPrice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlringStockPriceRecord> getRecordType() {
        return AlringStockPriceRecord.class;
    }

    /**
     * The column <code>stock.stock_price.stock_no</code>. 주식 번호
     */
    public final TableField<AlringStockPriceRecord, Integer> STOCK_NO = createField(DSL.name("stock_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "주식 번호");

    /**
     * The column <code>stock.stock_price.market_code</code>. 마켓코드
     */
    public final TableField<AlringStockPriceRecord, String> MARKET_CODE = createField(DSL.name("market_code"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "마켓코드");

    /**
     * The column <code>stock.stock_price.currency_code</code>. 통화
     */
    public final TableField<AlringStockPriceRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "통화");

    /**
     * The column <code>stock.stock_price.price</code>. 가격
     */
    public final TableField<AlringStockPriceRecord, Double> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "가격");

    /**
     * The column <code>stock.stock_price.stock_listed</code>. 상당 주식 수
     */
    public final TableField<AlringStockPriceRecord, Long> STOCK_LISTED = createField(DSL.name("stock_listed"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "상당 주식 수");

    /**
     * The column <code>stock.stock_price.market_cap</code>. 시총
     */
    public final TableField<AlringStockPriceRecord, Long> MARKET_CAP = createField(DSL.name("market_cap"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "시총");

    /**
     * The column <code>stock.stock_price.update_date</code>.
     */
    public final TableField<AlringStockPriceRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>stock.stock_price</code> table reference
     */
    public AlringStockPrice() {
        this(DSL.name("stock_price"), null);
    }

    /**
     * Create an aliased <code>stock.stock_price</code> table reference
     */
    public AlringStockPrice(String alias) {
        this(DSL.name(alias), STOCK_PRICE);
    }

    /**
     * Create an aliased <code>stock.stock_price</code> table reference
     */
    public AlringStockPrice(Name alias) {
        this(alias, STOCK_PRICE);
    }

    private AlringStockPrice(Name alias, Table<AlringStockPriceRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlringStockPrice(Name alias, Table<AlringStockPriceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AlringStockPrice(Table<O> child, ForeignKey<O, AlringStockPriceRecord> key) {
        super(child, key, STOCK_PRICE);
    }

    @Override
    public Schema getSchema() {
        return AlringStock.STOCK;
    }

    @Override
    public UniqueKey<AlringStockPriceRecord> getPrimaryKey() {
        return Keys.KEY_STOCK_PRICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AlringStockPriceRecord>> getKeys() {
        return Arrays.<UniqueKey<AlringStockPriceRecord>>asList(Keys.KEY_STOCK_PRICE_PRIMARY);
    }

    @Override
    public AlringStockPrice as(String alias) {
        return new AlringStockPrice(DSL.name(alias), this);
    }

    @Override
    public AlringStockPrice as(Name alias) {
        return new AlringStockPrice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlringStockPrice rename(String name) {
        return new AlringStockPrice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlringStockPrice rename(Name name) {
        return new AlringStockPrice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, Double, Long, Long, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
