/*
 * This file is generated by jOOQ.
 */
package jooq.alring_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.alring_dsl.AlringStock;
import jooq.alring_dsl.Keys;
import jooq.alring_dsl.tables.records.AlringExchangeRateRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlringExchangeRate extends TableImpl<AlringExchangeRateRecord> {

    private static final long serialVersionUID = 1499217648;

    /**
     * The reference instance of <code>stock.exchange_rate</code>
     */
    public static final AlringExchangeRate EXCHANGE_RATE = new AlringExchangeRate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlringExchangeRateRecord> getRecordType() {
        return AlringExchangeRateRecord.class;
    }

    /**
     * The column <code>stock.exchange_rate.currency_code</code>. 통화
     */
    public final TableField<AlringExchangeRateRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "통화");

    /**
     * The column <code>stock.exchange_rate.KRW</code>. 원 한국
     */
    public final TableField<AlringExchangeRateRecord, Double> KRW = createField(DSL.name("KRW"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "원 한국");

    /**
     * The column <code>stock.exchange_rate.JPY</code>. 엔 일본
     */
    public final TableField<AlringExchangeRateRecord, Double> JPY = createField(DSL.name("JPY"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "엔 일본");

    /**
     * The column <code>stock.exchange_rate.CNY</code>. 위안 중국
     */
    public final TableField<AlringExchangeRateRecord, Double> CNY = createField(DSL.name("CNY"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "위안 중국");

    /**
     * The column <code>stock.exchange_rate.TWD</code>. 대만달러 대만
     */
    public final TableField<AlringExchangeRateRecord, Double> TWD = createField(DSL.name("TWD"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "대만달러 대만");

    /**
     * The column <code>stock.exchange_rate.HKD</code>. 홍콩달러 홍콩
     */
    public final TableField<AlringExchangeRateRecord, Double> HKD = createField(DSL.name("HKD"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "홍콩달러 홍콩");

    /**
     * The column <code>stock.exchange_rate.USD</code>. 달러 미국
     */
    public final TableField<AlringExchangeRateRecord, Double> USD = createField(DSL.name("USD"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "달러 미국");

    /**
     * The column <code>stock.exchange_rate.GBP</code>. 파운드 영국
     */
    public final TableField<AlringExchangeRateRecord, Double> GBP = createField(DSL.name("GBP"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "파운드 영국");

    /**
     * The column <code>stock.exchange_rate.EUR</code>. 유로 유럽연합
     */
    public final TableField<AlringExchangeRateRecord, Double> EUR = createField(DSL.name("EUR"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "유로 유럽연합");

    /**
     * The column <code>stock.exchange_rate.RUB</code>. 루블 러시아
     */
    public final TableField<AlringExchangeRateRecord, Double> RUB = createField(DSL.name("RUB"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "루블 러시아");

    /**
     * The column <code>stock.exchange_rate.TL</code>. 리라 터키
     */
    public final TableField<AlringExchangeRateRecord, Double> TL = createField(DSL.name("TL"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "리라 터키");

    /**
     * The column <code>stock.exchange_rate.CHF</code>. 스위스프랑 스위스
     */
    public final TableField<AlringExchangeRateRecord, Double> CHF = createField(DSL.name("CHF"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "스위스프랑 스위스");

    /**
     * The column <code>stock.exchange_rate.SEK</code>. 크로나 스웨덴
     */
    public final TableField<AlringExchangeRateRecord, Double> SEK = createField(DSL.name("SEK"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "크로나 스웨덴");

    /**
     * The column <code>stock.exchange_rate.PLN</code>. 즐로티 폴란드
     */
    public final TableField<AlringExchangeRateRecord, Double> PLN = createField(DSL.name("PLN"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "즐로티 폴란드");

    /**
     * The column <code>stock.exchange_rate.update_date</code>.
     */
    public final TableField<AlringExchangeRateRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>stock.exchange_rate</code> table reference
     */
    public AlringExchangeRate() {
        this(DSL.name("exchange_rate"), null);
    }

    /**
     * Create an aliased <code>stock.exchange_rate</code> table reference
     */
    public AlringExchangeRate(String alias) {
        this(DSL.name(alias), EXCHANGE_RATE);
    }

    /**
     * Create an aliased <code>stock.exchange_rate</code> table reference
     */
    public AlringExchangeRate(Name alias) {
        this(alias, EXCHANGE_RATE);
    }

    private AlringExchangeRate(Name alias, Table<AlringExchangeRateRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlringExchangeRate(Name alias, Table<AlringExchangeRateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AlringExchangeRate(Table<O> child, ForeignKey<O, AlringExchangeRateRecord> key) {
        super(child, key, EXCHANGE_RATE);
    }

    @Override
    public Schema getSchema() {
        return AlringStock.STOCK;
    }

    @Override
    public UniqueKey<AlringExchangeRateRecord> getPrimaryKey() {
        return Keys.KEY_EXCHANGE_RATE_PRIMARY;
    }

    @Override
    public List<UniqueKey<AlringExchangeRateRecord>> getKeys() {
        return Arrays.<UniqueKey<AlringExchangeRateRecord>>asList(Keys.KEY_EXCHANGE_RATE_PRIMARY);
    }

    @Override
    public AlringExchangeRate as(String alias) {
        return new AlringExchangeRate(DSL.name(alias), this);
    }

    @Override
    public AlringExchangeRate as(Name alias) {
        return new AlringExchangeRate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlringExchangeRate rename(String name) {
        return new AlringExchangeRate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlringExchangeRate rename(Name name) {
        return new AlringExchangeRate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, LocalDateTime> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
