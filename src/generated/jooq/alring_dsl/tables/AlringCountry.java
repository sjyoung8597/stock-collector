/*
 * This file is generated by jOOQ.
 */
package jooq.alring_dsl.tables;


import java.util.Arrays;
import java.util.List;

import jooq.alring_dsl.AlringStock;
import jooq.alring_dsl.Keys;
import jooq.alring_dsl.tables.records.AlringCountryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlringCountry extends TableImpl<AlringCountryRecord> {

    private static final long serialVersionUID = -1690220123;

    /**
     * The reference instance of <code>stock.country</code>
     */
    public static final AlringCountry COUNTRY = new AlringCountry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlringCountryRecord> getRecordType() {
        return AlringCountryRecord.class;
    }

    /**
     * The column <code>stock.country.country_code</code>. 나라 코드
     */
    public final TableField<AlringCountryRecord, String> COUNTRY_CODE = createField(DSL.name("country_code"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "나라 코드");

    /**
     * The column <code>stock.country.currency_code</code>. 통화
     */
    public final TableField<AlringCountryRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "통화");

    /**
     * Create a <code>stock.country</code> table reference
     */
    public AlringCountry() {
        this(DSL.name("country"), null);
    }

    /**
     * Create an aliased <code>stock.country</code> table reference
     */
    public AlringCountry(String alias) {
        this(DSL.name(alias), COUNTRY);
    }

    /**
     * Create an aliased <code>stock.country</code> table reference
     */
    public AlringCountry(Name alias) {
        this(alias, COUNTRY);
    }

    private AlringCountry(Name alias, Table<AlringCountryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlringCountry(Name alias, Table<AlringCountryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AlringCountry(Table<O> child, ForeignKey<O, AlringCountryRecord> key) {
        super(child, key, COUNTRY);
    }

    @Override
    public Schema getSchema() {
        return AlringStock.STOCK;
    }

    @Override
    public UniqueKey<AlringCountryRecord> getPrimaryKey() {
        return Keys.KEY_COUNTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<AlringCountryRecord>> getKeys() {
        return Arrays.<UniqueKey<AlringCountryRecord>>asList(Keys.KEY_COUNTRY_PRIMARY);
    }

    @Override
    public AlringCountry as(String alias) {
        return new AlringCountry(DSL.name(alias), this);
    }

    @Override
    public AlringCountry as(Name alias) {
        return new AlringCountry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlringCountry rename(String name) {
        return new AlringCountry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlringCountry rename(Name name) {
        return new AlringCountry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
