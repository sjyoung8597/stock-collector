/*
 * This file is generated by jOOQ.
 */
package jooq.alring_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.alring_dsl.Keys;
import jooq.alring_dsl.tables.records.AlringStockRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlringStock extends TableImpl<AlringStockRecord> {

    private static final long serialVersionUID = 219669485;

    /**
     * The reference instance of <code>stock.stock</code>
     */
    public static final AlringStock STOCK_ = new AlringStock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlringStockRecord> getRecordType() {
        return AlringStockRecord.class;
    }

    /**
     * The column <code>stock.stock.stock_no</code>. 주식 번호
     */
    public final TableField<AlringStockRecord, Integer> STOCK_NO = createField(DSL.name("stock_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "주식 번호");

    /**
     * The column <code>stock.stock.country_code</code>. 나라 코드
     */
    public final TableField<AlringStockRecord, String> COUNTRY_CODE = createField(DSL.name("country_code"), org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "나라 코드");

    /**
     * The column <code>stock.stock.stock_name</code>.
     */
    public final TableField<AlringStockRecord, String> STOCK_NAME = createField(DSL.name("stock_name"), org.jooq.impl.SQLDataType.VARCHAR(1000).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>stock.stock.currency_code</code>. 통화
     */
    public final TableField<AlringStockRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "통화");

    /**
     * The column <code>stock.stock.industry_code</code>. 산업코드
     */
    public final TableField<AlringStockRecord, String> INDUSTRY_CODE = createField(DSL.name("industry_code"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "산업코드");

    /**
     * The column <code>stock.stock.market_code</code>. 마켓코드
     */
    public final TableField<AlringStockRecord, String> MARKET_CODE = createField(DSL.name("market_code"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "마켓코드");

    /**
     * The column <code>stock.stock.status</code>. 상태값 (YES,NO)
     */
    public final TableField<AlringStockRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false).defaultValue(org.jooq.impl.DSL.field("'YES'", org.jooq.impl.SQLDataType.VARCHAR)), this, "상태값 (YES,NO)");

    /**
     * The column <code>stock.stock.update_date</code>. 업데이트 날짜
     */
    public final TableField<AlringStockRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "업데이트 날짜");

    /**
     * Create a <code>stock.stock</code> table reference
     */
    public AlringStock() {
        this(DSL.name("stock"), null);
    }

    /**
     * Create an aliased <code>stock.stock</code> table reference
     */
    public AlringStock(String alias) {
        this(DSL.name(alias), STOCK_);
    }

    /**
     * Create an aliased <code>stock.stock</code> table reference
     */
    public AlringStock(Name alias) {
        this(alias, STOCK_);
    }

    private AlringStock(Name alias, Table<AlringStockRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlringStock(Name alias, Table<AlringStockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AlringStock(Table<O> child, ForeignKey<O, AlringStockRecord> key) {
        super(child, key, STOCK_);
    }

    @Override
    public Schema getSchema() {
        return jooq.alring_dsl.AlringStock.STOCK;
    }

    @Override
    public Identity<AlringStockRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STOCK_;
    }

    @Override
    public UniqueKey<AlringStockRecord> getPrimaryKey() {
        return Keys.KEY_STOCK_PRIMARY;
    }

    @Override
    public List<UniqueKey<AlringStockRecord>> getKeys() {
        return Arrays.<UniqueKey<AlringStockRecord>>asList(Keys.KEY_STOCK_PRIMARY);
    }

    @Override
    public AlringStock as(String alias) {
        return new AlringStock(DSL.name(alias), this);
    }

    @Override
    public AlringStock as(Name alias) {
        return new AlringStock(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlringStock rename(String name) {
        return new AlringStock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlringStock rename(Name name) {
        return new AlringStock(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
